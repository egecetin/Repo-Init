name: Build and test
on:
  push:
    branches:
    - 'master'
  pull_request:

permissions:
  contents: read

env:
  CCACHE_DIR: ${{ github.workspace }}/.ccache

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  pre-commit:
    runs-on: ubuntu-latest
    container: egecetinn/ubuntu2204
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Pre-commit
        uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1

  clang-tidy:
    runs-on: ubuntu-latest
    container: egecetinn/ubuntu2204
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          submodules: recursive
      - name: Prepare
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Configure
        run: cmake -S . -B build
      - name: Clang-tidy
        run: run-clang-tidy -j`nproc` -p=build -header-filter=`pwd`/include/ src/*.cpp src/**/*.cpp

  memleak:
    runs-on: ubuntu-latest
    container: egecetinn/ubuntu2204
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          submodules: recursive
      - name: Prepare
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Restore ccache
        id: ccache-restore
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            ${{ env.CCACHE_DIR }}
          key: memleak-ccache-${{ github.run_id }}
          restore-keys: |
            memleak-ccache
      - name: Install Test Requirements
        run: pip3 install -r tests/data/requirements.txt
      - name: Configure
        run: cmake -DXXX_ENABLE_MEMLEAK_CHECK=ON -S . -B build
      - name: Build
        run: cmake --build build --parallel
      - name: Run tests
        run: ctest --output-on-failure --test-dir build
      - name: Save ccache
        uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.ccache-restore.outputs.cache-primary-key }}

  fuzzer:
    runs-on: ubuntu-latest
    container: egecetinn/ubuntu2204
    strategy:
      matrix:
        sanitizer: [ASAN, USAN]
    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          submodules: recursive
      - name: Prepare
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Restore ccache
        id: ccache-restore
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            ${{ env.CCACHE_DIR }}
          key: ${{ matrix.sanitizer }}-ccache-${{ github.run_id }}
          restore-keys: |
            ${{ matrix.sanitizer }}-ccache
      - name: Install Test Requirements
        run: pip3 install -r tests/data/requirements.txt
      - name: Configure
        run: cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DXXX_BUILD_UNITTESTS=OFF -DXXX_BUILD_FUZZTESTS=ON -DXXX_ENABLE_${{ matrix.sanitizer }}=ON -S . -B build
      - name: Build
        run: cmake --build build --parallel
      - name: Run tests
        run: ctest --output-on-failure --test-dir build
      - name: Save ccache
        uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.ccache-restore.outputs.cache-primary-key }}
      - name: Upload regressions
        if: failure()
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: regressions-${{ matrix.sanitizer }}
          path: build/tests/fuzztests/crash*

  rockylinux:
    runs-on: ubuntu-latest
    container: egecetinn/${{ matrix.image }}
    strategy:
      matrix:
        include:
          - image: rockylinux8
          - image: rockylinux8-icx
            additional-flags: -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx
          - image: rockylinux9
          - image: rockylinux9-icx
            additional-flags: -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx

    steps:
      - name: Checkout Code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          submodules: recursive
      - name: Prepare
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Setup Intel Compiler variables
        if: contains(matrix.image, 'icx')
        run: |
          . /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV
      - name: Restore ccache
        id: ccache-restore
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            ${{ env.CCACHE_DIR }}
          key: ${{ matrix.image }}-ccache-${{ github.run_id }}
          restore-keys: |
            ${{ matrix.image }}-ccache
      - name: Install Test Requirements
        run: pip3 install -r tests/data/requirements.txt
      - name: Configure
        run: cmake ${{ matrix.additional-flags }} -S . -B build
      - name: Build
        run: cmake --build build --parallel
      - name: Run Tests
        id: test-step
        run: ctest --output-on-failure --test-dir build
      - name: Save ccache
        uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ steps.ccache-restore.outputs.cache-primary-key }}
