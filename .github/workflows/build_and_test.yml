name: Build and test
on:
  push:
    branches:
    - 'master'
  pull_request:

env:
  CODACY_VERSION: "1.3.8"

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    container: egecetinn/ubuntu2204
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Prepare
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - uses: pre-commit/action@v3.0.0
      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -S . -B build
      - name: Clang-tidy
        run: clang-tidy -p=build -header-filter=`pwd`/include/ src/*.cpp src/**/*.cpp &> build/clang-tidy-output.log
      - name: Upload to Codacy
        shell: bash
        run: |
          export PROJECT_TOKEN=${{ secrets.CODACY_PROJECT_TOKEN }}
          export COMMIT="$(if [ ${{ github.event_name }} == "pull_request" ]; then echo "${{ github.event.pull_request.head.sha }}"; else echo "${{ github.sha }}"; fi)"
          curl https://github.com/codacy/codacy-clang-tidy/releases/download/1.3.8/codacy-clang-tidy-linux-1.3.8 -o codacy-clang-tidy-latest
          chmod +x ./codacy-clang-tidy-latest
          cat build/clang-tidy-output.log | bash scripts/send-results.sh

  coverage:
    runs-on: ubuntu-latest
    container: egecetinn/ubuntu2204
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Prepare
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Install Test Requirements
        run: pip install -r tests/data/requirements.txt
      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=Debug -DXXX_ENABLE_COVERAGE=ON -DXXX_ENABLE_MEMLEAK_CHECK=ON -S . -B build
      - name: Build
        run: cmake --build build --parallel --target coverage-xml
      - name: Upload to Codacy
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./build/coverage-xml.xml
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/coverage-xml.xml
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

  rockylinux:
    runs-on: ubuntu-latest
    container: egecetinn/${{ matrix.image }}
    strategy:
      matrix:
        include:
          - image: rockylinux87
          - image: rockylinux91
          - image: rockylinux87-icx
            additional-flags: -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx -DCMAKE_RANLIB=/opt/intel/oneapi/compiler/latest/linux/bin-llvm/llvm-ranlib -DCMAKE_AR=/opt/intel/oneapi/compiler/latest/linux/bin-llvm/llvm-ar
          - image: rockylinux91-icx
            additional-flags: -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx -DCMAKE_RANLIB=/opt/intel/oneapi/compiler/latest/linux/bin-llvm/llvm-ranlib -DCMAKE_AR=/opt/intel/oneapi/compiler/latest/linux/bin-llvm/llvm-ar

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Intel Compiler variables
        if: contains(matrix.image, 'icx')
        run: |
          . /opt/intel/oneapi/setvars.sh
          printenv >> $GITHUB_ENV
      - name: Install Test Requirements
        run: pip3 install -r tests/data/requirements.txt
      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=Release ${{ matrix.additional-flags }} -S . -B build
      - name: Build
        run: cmake --build build --parallel
      - name: Run Tests
        id: test-step
        run: ctest --test-dir build
      - name: Upload artifact
        if: ${{ failure() && steps.test-step.conclusion == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          path: ./build/Testing/Temporary/LastTest.log
